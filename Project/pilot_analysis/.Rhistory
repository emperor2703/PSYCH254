View(`d0`)
?seperate
?separate
library("tidyr")
?separte
?separate
?gather
View(`d0`)
d1 = spread(d0,WorkerID,answer.condition)
d1 = spread(d0,WorkerId,answer.condition)
View(`d0`)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
gather(stocks, stock, price, -time)
View(temp)
View(`d0`)
for (i in 1:nSub){
temp = data.frame(fromJSON(file_names[i]))
d0 = bind_rows(d0,temp)
}
d0 = select(d0,WorkerId,answer.responses,answer.condition)
View(`d0`)
d0 = NULL;
for (i in 1:nSub){
temp = data.frame(fromJSON(file_names[i]))
d0 = bind_rows(d0,temp)
}
d0 = select(d0,WorkerId,answer.responses,answer.condition)
View(`d0`)
temp$answer.condition[7]
temp$answer.condition[,] = temp$answer.condition[7]
temp$answer.condition[:] = temp$answer.condition[7]
temp$answer.condition = temp$answer.condition[7]
View(temp)
d0 = NULL;
for (i in 1:nSub){
temp = data.frame(fromJSON(file_names[i]))
temp$answer.condition = temp$answer.condition[7]
temp$SubID = i;
d0 = bind_rows(d0,temp)
}
d0 = select(d0,SubID,answer.responses,answer.condition)
View(`d0`)
d0 = NULL;
for (i in 1:nSub){
temp = data.frame(fromJSON(file_names[i]))
temp$answer.condition = temp$answer.condition[7]
temp$SubID = i;
d0 = bind_rows(d0,temp)
}
d0 = select(d0,SubID,answer.responses,answer.condition) %>%
filter(answer.responses != NA)
View(`d0`)
d0 = NULL;
for (i in 1:nSub){
temp = data.frame(fromJSON(file_names[i]))
temp$answer.condition = temp$answer.condition[7]
temp$SubID = i;
d0 = bind_rows(d0,temp)
}
d0 = select(d0,SubID,answer.responses,answer.condition)
View(`d0`)
View(`d0`)
d0$answer.responses != NA
d0$answer.responses != "NA"
nSub = length(file_names)
d0 = NULL;
for (i in 1:nSub){
temp = data.frame(fromJSON(file_names[i]))
temp$answer.condition = temp$answer.condition[7]
temp$SubID = i;
d0 = bind_rows(d0,temp)
}
d0 = select(d0,SubID,answer.responses,answer.condition) %>%
filter(answer.responses != "NA")
View(`d0`)
View(`d0`)
View(temp)
MC1
?separte
?separate
df <- data.frame(x = c("a.b", "a.d", "b.c"))
df
df %>% separate(x, c("A", "B"))
df <- data.frame(x = c("x: 123", "y: error: 7"))
df
df %>% separate(x, c("key", "value"), ": ", extra = "merge")
View(`d0`)
d0 = d0[c(1,3,2)]
View(`d0`)
View(temp)
View(temp)
fromJSON(file_names[i])
temp = fromJSON(file_names[i])
temp
nSub = length(file_names)
d0 = NULL;
for (i in 1:nSub){
temp = fromJSON(file_names[i])
d_temp$subID = i;
d_temp$condition = temp$condition[7]
d_temp = data_frame(d_temp)
d0 = bindrows(d0,d_temp)
}
nSub = length(file_names)
d0 = NULL;
d_temp = NULL;
for (i in 1:nSub){
temp = fromJSON(file_names[i])
d_temp$subID = i;
d_temp$condition = temp$condition[7]
d_temp = data_frame(d_temp)
d0 = bindrows(d0,d_temp)
}
nSub = length(file_names)
d0 = NULL;
d_temp = NULL;
for (i in 1:nSub){
temp = fromJSON(file_names[i])
d_temp$subID = i;
d_temp$condition = temp$condition[7]
d_temp = data_frame(d_temp)
d0 = bind_rows(d0,d_temp)
}
View(d_temp)
temp = fromJSON(file_names[i])
d_temp$subID = i;
View(d_temp)
rm(d_temp)
d_temp = NULL;
d_temp$SubID = i
d_temp
d_temp$condition = temp$condition[7]
d_temp
d_temp$condition = temp$condition[7]
d_temp
temp$condition[7]
d_temp$condition = temp$answer.condition[7]
temp$answer.condition[7]
temp$answer$condition
d_temp$condition = temp$answer$condition[7]
d_temp
temp
temp$answer$responses
d_temp$condition = substr(temp$answer$condition[7],9,9)
temp = fromJSON(file_names[i])
d_temp$condition = temp$answer$condition[7]
d_temp
d_temp$MC1.Quick = substr(temp$answer$responses[2],9,9)
d_temp
d_temp$MC1.Quick = substr(temp$answer$responses[2],9,10)
d_temp$MC1.Quick
d_temp$MC1.Quick = substr(temp$answer$responses[2],7,7)
d_temp$MC1.Quick
temp$answer$responses[2]
d_temp$MC1.Quick = substr(temp$answer$responses[2],8,8)
d_temp$MC1.Quick = substr(temp$answer$responses[2],7,7)
d_temp$MC1.Quick
d_temp$MC1.Quick = substr(temp$answer$responses[2],8,8)
d_temp$MC1.Quick
temp = data_frame(fromJSON(file_names[i]))
View(temp)
temp = data.frame(fromJSON(file_names[i]))
View(temp)
install.packages("stringr")
?sub
temp = fromJSON(file_names[i])
d_temp$SubID = i;
d_temp$condition = temp$answer$condition[7]
sub(".*:", "", temp$answer$responses[2])
sub(".*Q0", "", temp$answer$responses[2])
sub(".*Q0", ",", temp$answer$responses[2])
substr(temp$answer$responses[2],8,8)
substr(temp$answer$responses[2],7)
substr(temp$answer$responses[2],7,7)
substr(temp$answer$responses[2])
temp$answer$responses[2]
?substr
sub(".*Q0", ",", temp$answer$responses[2])[2]
sub(".*Q0", ",", temp$answer$responses[2])[1]
sub(".*Q0", "", temp$answer$responses[2])
sub(".*Q0", "", temp$answer$responses[2])
?sub
a =  temp$answer$responses[2]
sub(".*?GN=(.*?);.*", "\\1", a)
sub(".*?Q0(.*?);.*", "\\1", a)
sub(".*?Q=(.*?);.*", "\\1", a)
sub(".*:", "", a
)
d_temp$MC1.Quick = substr(temp$answer$responses[2],7,7)
d_temp$MC2.Quick = substr(temp$answer$responses[2],9,9)
d_temp
d_temp$MC2.Quick = substr(temp$answer$responses[2],10,10)
d_temp
a
d_temp$MC2.Quick = substr(temp$answer$responses[2],14,14)
d_temp
d_temp$SubID = i;
d_temp$condition = temp$answer$condition[7]
d_temp$MC1.Quick = substr(temp$answer$responses[2],7,7)
d_temp$MC1.Slow = substr(temp$answer$responses[2],14,14)
d_temp
temp$answer$responses
d_temp$condition = temp$answer$condition[7]
d_temp$MC1.Quick = substr(temp$answer$responses[2],7,7)
d_temp$MC1.Slow = substr(temp$answer$responses[2],14,14)
d_temp$MC2.Quick = substr(temp$answer$responses[5],7,7)
d_temp$MC2.Slow = substr(temp$answer$responses[5],14,14)
temp$answer$responses[3]
temp$answer$responses[4]
temp$answer$responses[5]
temp$answer$responses[6]
temp$answer$responses[1]
temp$answer$responses[2]
temp$answer$responses[3]
d_temp = NULL;
d_temp = data.frame(d_temp)
View(d_temp)
?rep
rep(1)
rep(1,4)
d_temp$SubID =  rep(1,4)
d_temp = NULL;
d_temp$SubID =  rep(1,4)
d_temp$Decision = rep(substr(temp$answer$responses[2],7,7),4)
d_temp$Decision = rep(substr(temp$answer$condition[7],4)
)
d_temp$Decision = rep(temp$answer$condition[7],4)
d_temp = data.frame(d_temp)
View(d_temp)
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed= c("Quick","Slow"))
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed= c("Quick","Slow")
d_temp = data.frame(d_temp); d_temp
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp = data.frame(d_temp); d_temp
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC1 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp = data.frame(d_temp); d_temp
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp = data.frame(d_temp); d_temp
temp$answer$response
temp$answer$responses[3],7,7)
temp$answer$responses[3]
temp$answer$responses[3],7,7)
substr(temp$answer$responses[3],7,7)
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp = data.frame(d_temp); d_temp
temp$answer$responses[3]
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp = data.frame(d_temp); d_temp
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp = data.frame(d_temp); d_temp
28+7
56+7
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp$C4 = c(substr(temp$answer$responses[3],28,28),substr(temp$answer$responses[4],28,28))
d_temp$M1 = c(substr(temp$answer$responses[3],35,35),substr(temp$answer$responses[4],35,35))
d_temp$M2 = c(substr(temp$answer$responses[3],42,42),substr(temp$answer$responses[4],42,42))
d_temp$M3 = c(substr(temp$answer$responses[3],49,49),substr(temp$answer$responses[4],49,49))
d_temp$E1 = c(substr(temp$answer$responses[3],56,56),substr(temp$answer$responses[4],56,56))
d_temp$E2 = c(substr(temp$answer$responses[3],63,63),substr(temp$answer$responses[4],63,63))
d_temp$E3 = c(substr(temp$answer$responses[3],70,70),substr(temp$answer$responses[4],70,70))
d_temp = data.frame(d_temp); d_temp
for (i in 1:nSub){
temp = fromJSON(file_names[i])
# Ugly data-wrangling
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp$C4 = c(substr(temp$answer$responses[3],28,28),substr(temp$answer$responses[4],28,28))
d_temp$M1 = c(substr(temp$answer$responses[3],35,35),substr(temp$answer$responses[4],35,35))
d_temp$M2 = c(substr(temp$answer$responses[3],42,42),substr(temp$answer$responses[4],42,42))
d_temp$M3 = c(substr(temp$answer$responses[3],49,49),substr(temp$answer$responses[4],49,49))
d_temp$E1 = c(substr(temp$answer$responses[3],56,56),substr(temp$answer$responses[4],56,56))
d_temp$E2 = c(substr(temp$answer$responses[3],63,63),substr(temp$answer$responses[4],63,63))
d_temp = data.frame(d_temp); d_temp
}
View(d_temp)
for (i in 1:nSub){
temp = fromJSON(file_names[i])
# Ugly data-wrangling
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp$C4 = c(substr(temp$answer$responses[3],28,28),substr(temp$answer$responses[4],28,28))
d_temp$M1 = c(substr(temp$answer$responses[3],35,35),substr(temp$answer$responses[4],35,35))
d_temp$M2 = c(substr(temp$answer$responses[3],42,42),substr(temp$answer$responses[4],42,42))
d_temp$M3 = c(substr(temp$answer$responses[3],49,49),substr(temp$answer$responses[4],49,49))
d_temp$E1 = c(substr(temp$answer$responses[3],56,56),substr(temp$answer$responses[4],56,56))
d_temp$E2 = c(substr(temp$answer$responses[3],63,63),substr(temp$answer$responses[4],63,63))
d_temp = data.frame(d_temp)
d0 = bind_rows(d0,temp)
}
for (i in 1:nSub){
temp = fromJSON(file_names[i])
# Ugly data-wrangling
d_temp = NULL;
d_temp$SubID = rep(1,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp$C4 = c(substr(temp$answer$responses[3],28,28),substr(temp$answer$responses[4],28,28))
d_temp$M1 = c(substr(temp$answer$responses[3],35,35),substr(temp$answer$responses[4],35,35))
d_temp$M2 = c(substr(temp$answer$responses[3],42,42),substr(temp$answer$responses[4],42,42))
d_temp$M3 = c(substr(temp$answer$responses[3],49,49),substr(temp$answer$responses[4],49,49))
d_temp$E1 = c(substr(temp$answer$responses[3],56,56),substr(temp$answer$responses[4],56,56))
d_temp$E2 = c(substr(temp$answer$responses[3],63,63),substr(temp$answer$responses[4],63,63))
d_temp = data.frame(d_temp)
d0 = bind_rows(d0,d_temp)
}
warnings()
View(d_temp)
View(`d0`)
nSub = length(file_names)
d0 = NULL;
for (i in 1:nSub){
temp = fromJSON(file_names[i])
# Ugly data-wrangling
d_temp = NULL;
d_temp$SubID = rep(i,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp$C4 = c(substr(temp$answer$responses[3],28,28),substr(temp$answer$responses[4],28,28))
d_temp$M1 = c(substr(temp$answer$responses[3],35,35),substr(temp$answer$responses[4],35,35))
d_temp$M2 = c(substr(temp$answer$responses[3],42,42),substr(temp$answer$responses[4],42,42))
d_temp$M3 = c(substr(temp$answer$responses[3],49,49),substr(temp$answer$responses[4],49,49))
d_temp$E1 = c(substr(temp$answer$responses[3],56,56),substr(temp$answer$responses[4],56,56))
d_temp$E2 = c(substr(temp$answer$responses[3],63,63),substr(temp$answer$responses[4],63,63))
d_temp = data.frame(d_temp)
d0 = bind_rows(d0,d_temp)
}
View(d_temp)
View(`d0`)
warnings()
d0[2,]
d0[,2]
d0[,3]
d0[,4]
d0[,4:end]
d0[,4:14]
d0[4:14] = as.integer(d0[,4:14])
as.integer(d0[,4:14])
d0[,4:14]
for(i in 4:14) {
d0[,i] <- as.numeric(d0[,i])
}
d0[,i]
?apply
d0[,4:14] = apply(d0[,4:14], 2, function(x) as.numeric(x));
View(`d0`)
d0[,6] * -1
d0[,6] * -1 + 8
d0$C1 = d0$C1 * -1 + 8;
d0$C1 = d0$C1 * -1 + 8;
d0$C1
d0$C1 = d0$C1 * -1 + 8;
d0$C1
d0$E2 = d0$E2 * -1 + 8;
nSub = length(file_names)
d0 = NULL;
for (i in 1:nSub){
temp = fromJSON(file_names[i])
# Ugly data-wrangling
d_temp = NULL;
d_temp$SubID = rep(i,2)
d_temp$Decision = rep(temp$answer$condition[7],2)
d_temp$Speed = c("Quick","Slow")
d_temp$MC1 = c(substr(temp$answer$responses[2],7,7),substr(temp$answer$responses[2],14,14))
d_temp$MC2 = c(substr(temp$answer$responses[5],7,7),substr(temp$answer$responses[5],14,14))
d_temp$C1 = c(substr(temp$answer$responses[3],7,7),substr(temp$answer$responses[4],7,7))
d_temp$C2 = c(substr(temp$answer$responses[3],14,14),substr(temp$answer$responses[4],14,14))
d_temp$C3 = c(substr(temp$answer$responses[3],21,21),substr(temp$answer$responses[4],21,21))
d_temp$C4 = c(substr(temp$answer$responses[3],28,28),substr(temp$answer$responses[4],28,28))
d_temp$M1 = c(substr(temp$answer$responses[3],35,35),substr(temp$answer$responses[4],35,35))
d_temp$M2 = c(substr(temp$answer$responses[3],42,42),substr(temp$answer$responses[4],42,42))
d_temp$M3 = c(substr(temp$answer$responses[3],49,49),substr(temp$answer$responses[4],49,49))
d_temp$E1 = c(substr(temp$answer$responses[3],56,56),substr(temp$answer$responses[4],56,56))
d_temp$E2 = c(substr(temp$answer$responses[3],63,63),substr(temp$answer$responses[4],63,63))
d_temp = data.frame(d_temp)
d0 = bind_rows(d0,d_temp)
}
# convert values to numeric
d0[,4:14] = apply(d0[,4:14], 2, function(x) as.numeric(x));
# convert reverse coded values
d0$C1 = d0$C1 * -1 + 8;
d0$E2 = d0$E2 * -1 + 8;
View(`d0`)
test = gather(d0,"responses1","responses2",4:14)
View(test)
d.tidy = gather(d0,"Question","Response",4:14)
test = gather(d0,"responses1","responses2",4:14)
View(d.tidy)
View(`d0`)
View(d.tidy)
d.tidy %>% group_by("Speed")
d.tidy %>% filter(Question == MC1) %>%
group_by("Speed") %>%
mean(d.tidy)
d.tidy %>% filter(Question == "MC1") %>%
group_by("Speed")
d.tidy %>% filter(Question == "MC1") %>%
group_by("Speed") %>%
mean(d.tidy)
d.tidy %>% filter(Question == "MC1") %>%
group_by("Speed") %>%
mean(d.tidy$Response)
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
mean(d.tidy$Response)
d.tidy
d.tidy
d.tidy %>% filter(Question == "MC1")
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed)
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
mean(d.tidy$Response)
d.tidy
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(mean(d.tidy$Response))
mean(d.tidy$Response)
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(mean(d.tidy$Response))
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(avg = mean(d.tidy$Response))
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(avg = mean(Response))
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(Avg = mean(Response),CI = ci95(Response) )
sem <- function(x) {sd(x) / sqrt(length(x))}
ci95 <- function(x) {sem(x) * 1.96
}
summarise(Avg = mean(Response),CI = ci95(Response) )
d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(Avg = mean(Response),CI = ci95(Response))
MC1 = d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(Avg = mean(Response),CI = ci95(Response))
MC1 = d.tidy %>% filter(Question == "MC1") %>%
group_by(Speed) %>%
summarise(Avg = mean(Response),CI = ci95(Response))
MC2 = d.tidy %>% filter(Question == "MC2") %>%
group_by(Speed) %>%
summarise(Avg = mean(Response),CI = ci95(Response))
View(MC2)
View(MC1)
